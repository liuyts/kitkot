// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videorpc

import (
	"context"

	"kitkot/server/video/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetAuthorIdRequest           = pb.GetAuthorIdRequest
	GetAuthorIdResponse          = pb.GetAuthorIdResponse
	GetUserVideoCountRequest     = pb.GetUserVideoCountRequest
	GetUserVideoCountResponse    = pb.GetUserVideoCountResponse
	GetVideoListByUserIdRequest  = pb.GetVideoListByUserIdRequest
	GetVideoListByUserIdResponse = pb.GetVideoListByUserIdResponse
	GetVideoListInfoRequest      = pb.GetVideoListInfoRequest
	GetVideoListInfoResponse     = pb.GetVideoListInfoResponse
	PublishVideoRequest          = pb.PublishVideoRequest
	PublishVideoResponse         = pb.PublishVideoResponse
	User                         = pb.User
	Video                        = pb.Video
	VideoFeedRequest             = pb.VideoFeedRequest
	VideoFeedResponse            = pb.VideoFeedResponse

	VideoRpc interface {
		GetVideoListByUserId(ctx context.Context, in *GetVideoListByUserIdRequest, opts ...grpc.CallOption) (*GetVideoListByUserIdResponse, error)
		VideoFeed(ctx context.Context, in *VideoFeedRequest, opts ...grpc.CallOption) (*VideoFeedResponse, error)
		PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error)
		GetUserVideoCount(ctx context.Context, in *GetUserVideoCountRequest, opts ...grpc.CallOption) (*GetUserVideoCountResponse, error)
		GetVideoListInfo(ctx context.Context, in *GetVideoListInfoRequest, opts ...grpc.CallOption) (*GetVideoListInfoResponse, error)
		GetAuthorId(ctx context.Context, in *GetAuthorIdRequest, opts ...grpc.CallOption) (*GetAuthorIdResponse, error)
	}

	defaultVideoRpc struct {
		cli zrpc.Client
	}
)

func NewVideoRpc(cli zrpc.Client) VideoRpc {
	return &defaultVideoRpc{
		cli: cli,
	}
}

func (m *defaultVideoRpc) GetVideoListByUserId(ctx context.Context, in *GetVideoListByUserIdRequest, opts ...grpc.CallOption) (*GetVideoListByUserIdResponse, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetVideoListByUserId(ctx, in, opts...)
}

func (m *defaultVideoRpc) VideoFeed(ctx context.Context, in *VideoFeedRequest, opts ...grpc.CallOption) (*VideoFeedResponse, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.VideoFeed(ctx, in, opts...)
}

func (m *defaultVideoRpc) PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.PublishVideo(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetUserVideoCount(ctx context.Context, in *GetUserVideoCountRequest, opts ...grpc.CallOption) (*GetUserVideoCountResponse, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetUserVideoCount(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetVideoListInfo(ctx context.Context, in *GetVideoListInfoRequest, opts ...grpc.CallOption) (*GetVideoListInfoResponse, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetVideoListInfo(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetAuthorId(ctx context.Context, in *GetAuthorIdRequest, opts ...grpc.CallOption) (*GetAuthorIdResponse, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetAuthorId(ctx, in, opts...)
}
