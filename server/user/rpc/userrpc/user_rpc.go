// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userrpc

import (
	"context"

	"kitkot/server/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	User                 = pb.User
	UserInfoRequest      = pb.UserInfoRequest
	UserInfoResponse     = pb.UserInfoResponse
	UserLoginRequest     = pb.UserLoginRequest
	UserLoginResponse    = pb.UserLoginResponse
	UserRegisterRequest  = pb.UserRegisterRequest
	UserRegisterResponse = pb.UserRegisterResponse

	UserRpc interface {
		UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
		UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

func (m *defaultUserRpc) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.UserRegister(ctx, in, opts...)
}

func (m *defaultUserRpc) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.UserLogin(ctx, in, opts...)
}

func (m *defaultUserRpc) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
