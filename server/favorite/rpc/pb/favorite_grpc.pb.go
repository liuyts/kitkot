// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: favorite.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FavoriteRpc_AddFavorite_FullMethodName           = "/FavoriteRpc/AddFavorite"
	FavoriteRpc_DelFavorite_FullMethodName           = "/FavoriteRpc/DelFavorite"
	FavoriteRpc_GetVideoFavoriteCount_FullMethodName = "/FavoriteRpc/GetVideoFavoriteCount"
	FavoriteRpc_GetUserFavoriteCount_FullMethodName  = "/FavoriteRpc/GetUserFavoriteCount"
	FavoriteRpc_GetUserFavoritedCount_FullMethodName = "/FavoriteRpc/GetUserFavoritedCount"
	FavoriteRpc_IsFavorite_FullMethodName            = "/FavoriteRpc/IsFavorite"
)

// FavoriteRpcClient is the client API for FavoriteRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteRpcClient interface {
	AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error)
	DelFavorite(ctx context.Context, in *DelFavoriteRequest, opts ...grpc.CallOption) (*DelFavoriteResponse, error)
	GetVideoFavoriteCount(ctx context.Context, in *GetVideoFavoriteCountRequest, opts ...grpc.CallOption) (*GetVideoFavoriteCountResponse, error)
	GetUserFavoriteCount(ctx context.Context, in *GetUserFavoriteCountRequest, opts ...grpc.CallOption) (*GetUserFavoriteCountResponse, error)
	GetUserFavoritedCount(ctx context.Context, in *GetUserFavoritedCountRequest, opts ...grpc.CallOption) (*GetUserFavoritedCountResponse, error)
	IsFavorite(ctx context.Context, in *IsFavoriteRequest, opts ...grpc.CallOption) (*IsFavoriteResponse, error)
}

type favoriteRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteRpcClient(cc grpc.ClientConnInterface) FavoriteRpcClient {
	return &favoriteRpcClient{cc}
}

func (c *favoriteRpcClient) AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error) {
	out := new(AddFavoriteResponse)
	err := c.cc.Invoke(ctx, FavoriteRpc_AddFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteRpcClient) DelFavorite(ctx context.Context, in *DelFavoriteRequest, opts ...grpc.CallOption) (*DelFavoriteResponse, error) {
	out := new(DelFavoriteResponse)
	err := c.cc.Invoke(ctx, FavoriteRpc_DelFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteRpcClient) GetVideoFavoriteCount(ctx context.Context, in *GetVideoFavoriteCountRequest, opts ...grpc.CallOption) (*GetVideoFavoriteCountResponse, error) {
	out := new(GetVideoFavoriteCountResponse)
	err := c.cc.Invoke(ctx, FavoriteRpc_GetVideoFavoriteCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteRpcClient) GetUserFavoriteCount(ctx context.Context, in *GetUserFavoriteCountRequest, opts ...grpc.CallOption) (*GetUserFavoriteCountResponse, error) {
	out := new(GetUserFavoriteCountResponse)
	err := c.cc.Invoke(ctx, FavoriteRpc_GetUserFavoriteCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteRpcClient) GetUserFavoritedCount(ctx context.Context, in *GetUserFavoritedCountRequest, opts ...grpc.CallOption) (*GetUserFavoritedCountResponse, error) {
	out := new(GetUserFavoritedCountResponse)
	err := c.cc.Invoke(ctx, FavoriteRpc_GetUserFavoritedCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteRpcClient) IsFavorite(ctx context.Context, in *IsFavoriteRequest, opts ...grpc.CallOption) (*IsFavoriteResponse, error) {
	out := new(IsFavoriteResponse)
	err := c.cc.Invoke(ctx, FavoriteRpc_IsFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteRpcServer is the server API for FavoriteRpc service.
// All implementations must embed UnimplementedFavoriteRpcServer
// for forward compatibility
type FavoriteRpcServer interface {
	AddFavorite(context.Context, *AddFavoriteRequest) (*AddFavoriteResponse, error)
	DelFavorite(context.Context, *DelFavoriteRequest) (*DelFavoriteResponse, error)
	GetVideoFavoriteCount(context.Context, *GetVideoFavoriteCountRequest) (*GetVideoFavoriteCountResponse, error)
	GetUserFavoriteCount(context.Context, *GetUserFavoriteCountRequest) (*GetUserFavoriteCountResponse, error)
	GetUserFavoritedCount(context.Context, *GetUserFavoritedCountRequest) (*GetUserFavoritedCountResponse, error)
	IsFavorite(context.Context, *IsFavoriteRequest) (*IsFavoriteResponse, error)
	mustEmbedUnimplementedFavoriteRpcServer()
}

// UnimplementedFavoriteRpcServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteRpcServer struct {
}

func (UnimplementedFavoriteRpcServer) AddFavorite(context.Context, *AddFavoriteRequest) (*AddFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavorite not implemented")
}
func (UnimplementedFavoriteRpcServer) DelFavorite(context.Context, *DelFavoriteRequest) (*DelFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFavorite not implemented")
}
func (UnimplementedFavoriteRpcServer) GetVideoFavoriteCount(context.Context, *GetVideoFavoriteCountRequest) (*GetVideoFavoriteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoFavoriteCount not implemented")
}
func (UnimplementedFavoriteRpcServer) GetUserFavoriteCount(context.Context, *GetUserFavoriteCountRequest) (*GetUserFavoriteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoriteCount not implemented")
}
func (UnimplementedFavoriteRpcServer) GetUserFavoritedCount(context.Context, *GetUserFavoritedCountRequest) (*GetUserFavoritedCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoritedCount not implemented")
}
func (UnimplementedFavoriteRpcServer) IsFavorite(context.Context, *IsFavoriteRequest) (*IsFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavorite not implemented")
}
func (UnimplementedFavoriteRpcServer) mustEmbedUnimplementedFavoriteRpcServer() {}

// UnsafeFavoriteRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteRpcServer will
// result in compilation errors.
type UnsafeFavoriteRpcServer interface {
	mustEmbedUnimplementedFavoriteRpcServer()
}

func RegisterFavoriteRpcServer(s grpc.ServiceRegistrar, srv FavoriteRpcServer) {
	s.RegisterService(&FavoriteRpc_ServiceDesc, srv)
}

func _FavoriteRpc_AddFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteRpcServer).AddFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteRpc_AddFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteRpcServer).AddFavorite(ctx, req.(*AddFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteRpc_DelFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteRpcServer).DelFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteRpc_DelFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteRpcServer).DelFavorite(ctx, req.(*DelFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteRpc_GetVideoFavoriteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoFavoriteCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteRpcServer).GetVideoFavoriteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteRpc_GetVideoFavoriteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteRpcServer).GetVideoFavoriteCount(ctx, req.(*GetVideoFavoriteCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteRpc_GetUserFavoriteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFavoriteCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteRpcServer).GetUserFavoriteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteRpc_GetUserFavoriteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteRpcServer).GetUserFavoriteCount(ctx, req.(*GetUserFavoriteCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteRpc_GetUserFavoritedCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFavoritedCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteRpcServer).GetUserFavoritedCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteRpc_GetUserFavoritedCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteRpcServer).GetUserFavoritedCount(ctx, req.(*GetUserFavoritedCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteRpc_IsFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteRpcServer).IsFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteRpc_IsFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteRpcServer).IsFavorite(ctx, req.(*IsFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteRpc_ServiceDesc is the grpc.ServiceDesc for FavoriteRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FavoriteRpc",
	HandlerType: (*FavoriteRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFavorite",
			Handler:    _FavoriteRpc_AddFavorite_Handler,
		},
		{
			MethodName: "DelFavorite",
			Handler:    _FavoriteRpc_DelFavorite_Handler,
		},
		{
			MethodName: "GetVideoFavoriteCount",
			Handler:    _FavoriteRpc_GetVideoFavoriteCount_Handler,
		},
		{
			MethodName: "GetUserFavoriteCount",
			Handler:    _FavoriteRpc_GetUserFavoriteCount_Handler,
		},
		{
			MethodName: "GetUserFavoritedCount",
			Handler:    _FavoriteRpc_GetUserFavoritedCount_Handler,
		},
		{
			MethodName: "IsFavorite",
			Handler:    _FavoriteRpc_IsFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favorite.proto",
}
